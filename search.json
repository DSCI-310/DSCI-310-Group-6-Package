[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"authors package6 made members around globe diverse set skills, personalities, experiences backgrounds. differences community experiences great successes continued growth. ’re working members community, Code Conduct help steer interactions keep group project positive, successful, growing community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"expected-behavior","dir":"","previous_headings":"","what":"Expected Behavior:","title":"Code of Conduct","text":"open. Members group open collaboration. Acknowledging time effort put group mates. respectful differing viewpoints experiences. Showing empathy towards group members. Gracefully accepting constructive criticism. Using inclusive language. Every member group right identity respected. intention group collaborate package, regardless age, gender identity expression, sexual orientation, disability, physical appearance, body size, ethnicity, nationality, race, religion (lack thereof), education, socio-economic status.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"inappropriate-behavior","dir":"","previous_headings":"","what":"Inappropriate Behavior","title":"Code of Conduct","text":"Examples unacceptable behavior participants include: Harassment participants form Deliberate intimidation, stalking, following Logging taking screenshots online activity harassment purposes Violent threats language directed another person Sexual language imagery online communities conference venue, including talks Insults, put downs, jokes based upon stereotypes, exclusionary, hold others ridicule Excessive swearing Unwelcome sexual attention advances Unwelcome physical contact, including simulated physical contact (eg, textual descriptions like “hug” “backrub”) without consent request stop Pattern inappropriate social contact, requesting/assuming inappropriate levels intimacy others Continued one--one communication requests cease Group members asked stop inappropriate behavior expected comply immediately.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"consequences","dir":"","previous_headings":"","what":"Consequences","title":"Code of Conduct","text":"participant engages behavior violates code conduct, participants may take action deem appropriate, including warning offender communication course instrucors appropiate university authorities. Thank helping make welcoming, friendly group everyone. Authors package6","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"welcome contributions project! notice bug, feature request, please open issue . group members contribute working branhch-feature approach, meaning new feature fix implemented tested branch submitted peer review Pull Request incorporated main working branch. ’d like contribute feature bug fix, group member, encourage fork repository submit fix new feature using Pull Request. review pull requests within 7 days. contributors must abide code conduct. (Note: text based template taken UBC DSCI310 website)","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 package6 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Muke Wang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang M (2022). package6: Helper Functions DSCI-310-Group-6. R package version 0.0.0.9000.","code":"@Manual{,   title = {package6: Helper Functions for DSCI-310-Group-6},   author = {Muke Wang},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"package6","dir":"","previous_headings":"","what":"Helper Functions for DSCI-310-Group-6","title":"Helper Functions for DSCI-310-Group-6","text":"goal package6 encapsulate useful helper functions used data analysis projects similar New Taipei City Real Estate Value Prediction.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Functions for DSCI-310-Group-6","text":"can install development version package6 GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DSCI-310/DSCI-310-Group6-Package\")"},{"path":[]},{"path":"/index.html","id":"format_column_names","dir":"","previous_headings":"Usage","what":"format_column_names()","title":"Helper Functions for DSCI-310-Group-6","text":"Sometimes raw data set column names blank spaces column names. generally good idea remove blank spaces. base::gsub() . Notice gsub() requires three arguments modifies original data frame.Also return value data frame. package6::format_column_names() requires one argument. modify original data frame returns data frame formatted column names.","code":"df <- data.frame(`col Name1`= c(1,2),`col Name2` = c(\"3\", \"4\"),  check.names = FALSE) df #>   col Name1 col Name2 #> 1         1         3 #> 2         2         4 names(df) <- gsub(\" \", \"_\", names(df)) df #>   col_Name1 col_Name2 #> 1         1         3 #> 2         2         4 df <- data.frame(`col Name1`= c(1,2),`col Name2` = c(\"3\", \"4\"),  check.names = FALSE) formatted_df <- format_column_names(df) formatted_df #>   col_Name1 col_Name2 #> 1         1         3 #> 2         2         4"},{"path":"/index.html","id":"split_datadataset-train_perc-vs_prec-test_perc","dir":"","previous_headings":"Usage","what":"split_data(dataset, train_perc, vs_prec, test_perc)","title":"Helper Functions for DSCI-310-Group-6","text":"split data set/ date frame 3 parts:train data, test data variable selection data Let’s start mtcars data frame","code":"df <- mtcars glimpse(df) #> Rows: 32 #> Columns: 11 #> $ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,… #> $ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,… #> $ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16… #> $ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180… #> $ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,… #> $ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.… #> $ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18… #> $ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,… #> $ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,… #> $ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,… #> $ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,… train<-split_data(mtcars)$train cv<-split_data(mtcars)$cv test<-split_data(mtcars)$test glimpse(train) #> Rows: 19 #> Columns: 11 #> $ mpg  <dbl> 15.0, 18.7, 21.4, 22.8, 21.4, 15.2, 13.3, 15.2, 10.4, 19.2, 27.3,… #> $ cyl  <dbl> 8, 8, 4, 4, 6, 8, 8, 8, 8, 6, 4, 8, 4, 4, 8, 4, 8, 4, 8 #> $ disp <dbl> 301.0, 360.0, 121.0, 108.0, 258.0, 304.0, 350.0, 275.8, 472.0, 16… #> $ hp   <dbl> 335, 175, 109, 93, 110, 150, 245, 180, 205, 123, 66, 180, 97, 65,… #> $ drat <dbl> 3.54, 3.15, 4.11, 3.85, 3.08, 3.15, 3.73, 3.07, 2.93, 3.92, 4.08,… #> $ wt   <dbl> 3.570, 3.440, 2.780, 2.320, 3.215, 3.435, 3.840, 3.780, 5.250, 3.… #> $ qsec <dbl> 14.60, 17.02, 18.60, 18.61, 19.44, 17.30, 15.41, 18.00, 17.98, 18… #> $ vs   <dbl> 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0 #> $ am   <dbl> 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0 #> $ gear <dbl> 5, 3, 4, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 4, 3, 5, 3, 4, 3 #> $ carb <dbl> 8, 2, 2, 1, 1, 2, 4, 3, 4, 4, 1, 3, 1, 1, 4, 2, 3, 2, 4 glimpse(cv) #> Rows: 7 #> Columns: 11 #> $ mpg  <dbl> 33.9, 24.4, 30.4, 21.5, 26.0, 19.2, 15.2 #> $ cyl  <dbl> 4, 4, 4, 4, 4, 6, 8 #> $ disp <dbl> 71.1, 146.7, 95.1, 120.1, 120.3, 167.6, 275.8 #> $ hp   <dbl> 65, 62, 113, 97, 91, 123, 180 #> $ drat <dbl> 4.22, 3.69, 3.77, 3.70, 4.43, 3.92, 3.07 #> $ wt   <dbl> 1.835, 3.190, 1.513, 2.465, 2.140, 3.440, 3.780 #> $ qsec <dbl> 19.90, 20.00, 16.90, 20.01, 16.70, 18.30, 18.00 #> $ vs   <dbl> 1, 1, 1, 1, 0, 1, 0 #> $ am   <dbl> 1, 0, 1, 0, 1, 0, 0 #> $ gear <dbl> 4, 4, 5, 3, 5, 4, 3 #> $ carb <dbl> 1, 2, 2, 1, 2, 4, 3 glimpse(test) #> Rows: 6 #> Columns: 11 #> $ mpg  <dbl> 13.3, 21.5, 14.3, 15.2, 17.3, 21.0 #> $ cyl  <dbl> 8, 4, 8, 8, 8, 6 #> $ disp <dbl> 350.0, 120.1, 360.0, 304.0, 275.8, 160.0 #> $ hp   <dbl> 245, 97, 245, 150, 180, 110 #> $ drat <dbl> 3.73, 3.70, 3.21, 3.15, 3.07, 3.90 #> $ wt   <dbl> 3.840, 2.465, 3.570, 3.435, 3.730, 2.620 #> $ qsec <dbl> 15.41, 20.01, 15.84, 17.30, 17.60, 16.46 #> $ vs   <dbl> 0, 1, 0, 0, 0, 0 #> $ am   <dbl> 0, 0, 0, 0, 0, 1 #> $ gear <dbl> 3, 3, 3, 3, 3, 4 #> $ carb <dbl> 4, 1, 4, 2, 3, 4"},{"path":"/index.html","id":"cal_rmsexy","dir":"","previous_headings":"Usage","what":"cal_rmse(x,y)","title":"Helper Functions for DSCI-310-Group-6","text":"calculate RMSE","code":"predicted = c(12, 5, 19, 3) actual = c(11, 4, 15, 6)  cal_rmse(predicted, actual) #> [1] 2.6"},{"path":[]},{"path":[]},{"path":"/reference/cal_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"RMSE calculator function — cal_rmse","title":"RMSE calculator function — cal_rmse","text":"RMSE calculator function","code":""},{"path":"/reference/cal_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RMSE calculator function — cal_rmse","text":"","code":"cal_rmse(predicted, actual)"},{"path":"/reference/cal_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RMSE calculator function — cal_rmse","text":"predicted predicted numeric vector representing values actual actual numeric vector representing actual values data","code":""},{"path":"/reference/cal_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RMSE calculator function — cal_rmse","text":"int value indicating RMSE","code":""},{"path":"/reference/cal_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RMSE calculator function — cal_rmse","text":"","code":"x <- seq(-10, 10, by = .1) y <- dnorm(x, mean = 2.5, sd = 0.5) cal_rmse(x,y) #> [1] 5.78"},{"path":"/reference/format_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats Column Names — format_column_names","title":"Formats Column Names — format_column_names","text":"Substitutes blank space \" \" column names input data frame \"_\". \" \" column names, return data frame.","code":""},{"path":"/reference/format_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats Column Names — format_column_names","text":"","code":"format_column_names(df)"},{"path":"/reference/format_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats Column Names — format_column_names","text":"df data frame","code":""},{"path":"/reference/format_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats Column Names — format_column_names","text":"data frame \" \" column names","code":""},{"path":"/reference/format_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats Column Names — format_column_names","text":"","code":"df <- data.frame(`col Name 1` = c(1, 2),                  `col Name 2` = c(3, 4),                   check.names = FALSE) format_column_names(df) #>   col_Name_1 col_Name_2 #> 1          1          3 #> 2          2          4"},{"path":"/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data into 3 data frames — split_data","title":"Split data into 3 data frames — split_data","text":"Split data 3 data frames","code":""},{"path":"/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data into 3 data frames — split_data","text":"","code":"split_data(dataset, train_perc = 0.6, vs_prec = 0.2, test_perc = 0.2)"},{"path":"/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data into 3 data frames — split_data","text":"dataset data set data frame train_perc percentage train data, default value 0.6 vs_prec percentage variable selection data, default value 0.2 test_perc percentage test data, default value 0.2","code":""},{"path":"/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data into 3 data frames — split_data","text":"list 3 data frame: train data sets, test data sets, variable selection data sets","code":""},{"path":"/reference/split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data into 3 data frames — split_data","text":"","code":"x=data.frame(replicate(10,sample(0:1,1000,rep=TRUE))) out = split_data(x)"}]
